{"name":"Mobile-detect.js","tagline":"Device detection (phone, tablet, desktop, mobile grade, os, versions)","body":"# mobile-detect.js\r\n\r\nA loose port of [Mobile-Detect](https://github.com/serbanghita/Mobile-Detect) to JavaScript.\r\n\r\nThis script will detect the device by comparing patterns against a given User-Agent string.\r\nYou can find out information about the device rendering your web page:\r\n\r\n  * mobile or not\r\n  * if mobile, whether phone or tablet\r\n  * operating system\r\n  * Mobile Grade (A, B, C)\r\n  * specific versions (e.g. WebKit)\r\n\r\n\r\n# Usage\r\n\r\n## Browser\r\n\r\n    <script src=\"mobile-detect.js\"></script>\r\n    <script>\r\n        var md = new MobileDetect(window.navigator.userAgent);\r\n        // ... see below\r\n    </script>\r\n\r\n## Node.js / Express\r\n\r\n    var MobileDetect = require('mobile-detect'),\r\n        md = new MobileDetect(req.headers['user-agent']);\r\n    // ... see below\r\n\r\n## General\r\n\r\n```js\r\n// more typically we would instantiate with `window.navigator.userAgent` as user-agent\r\nvar md = new MobileDetect('Mozilla/5.0 (Linux; U; Android 4.0.3; en-in; SonyEricssonMT11i Build/4.1.A.0.562) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30');\r\nconsole.log(md.mobile());     // 'Sony'\r\nconsole.log(md.phone());      // 'Sony'\r\nconsole.log(md.tablet());     // null\r\nconsole.log(md.userAgent());  // 'Safari'\r\nconsole.log(md.os());         // 'AndroidOS'\r\nconsole.log(md.is('iPhone')); // false\r\nconsole.log(md.is('bot'));    // false\r\nconsole.log(md.version('Webkit')); // 534.3\r\n```\r\n\r\n## More Info ...\r\n\r\nOpen generated JSDoc in `doc/index.html`\r\n\r\n## Side Effects\r\n\r\nScript creates the global property `MobileDetect`.\r\n\r\n## Modernizr Extension\r\n\r\nWhen using [Modernizr](http://modernizr.com/), you can include `mobile-detect-modernizr.js`.\r\nIt will add the CSS classes `mobile`, `phone`, `tablet` and `mobilegradea` if applicable.\r\n\r\nYou can easily extend it, e.g. `android`, `iphone`, etc.\r\n\r\n## Size (bytes)\r\n\r\n * development: 30025\r\n * minified: 18045\r\n * minified + gzipped: 7149\r\n\r\n\r\n# Installation\r\n\r\n## Bower\r\n\r\n**TODO** is not working yet, since project is not tagged w/ a version!\r\n\r\n    $ bower install hgoebl/mobile-detect.js --save\r\n\r\n## Node.js / npm\r\n\r\n**TODO** is not working yet, since project is not tagged w/ a version and not published to npmjs.org!\r\n\r\n    $ npm install mobile-detect --save\r\n\r\n# Alternatives\r\n\r\nOften device detection is the first solution in your mind. Please consider looking for other solutions\r\nlike media queries and feature detection (e.g. w/ Modernizr). Maybe there are better (simpler, smaller,\r\nfaster) device detection libraries, so here you have a list:\r\n\r\n  * [Modernizr](http://modernizr.com/)\r\n    In most cases the better solution: don't use knowledge about device and version, but detect features\r\n    (touch, canvas, ...)\r\n  * [Mobile-Detect](https://github.com/serbanghita/Mobile-Detect)\r\n    A lightweight PHP class for detecting mobile devices (including tablets).\r\n    This is the \"source\" of this JavaScript project and if you use PHP on your server you should use it!\r\n  * [dmolsen/Detector](https://github.com/dmolsen/Detector)\r\n    Detector is a simple, PHP- and JavaScript-based browser- and\r\n    feature-detection library that can adapt to new devices & browsers\r\n    on its own without the need to pull from a central database of browser information.\r\n  * [matthewhudson/device.js](https://github.com/matthewhudson/device.js)\r\n    Conditional CSS and/or JavaScript based on device operating system, orientation and type\r\n  * [brendanlim/mobile-fu](https://github.com/brendanlim/mobile-fu)\r\n    Automatically detect mobile requests from mobile devices in your Rails application.\r\n  * [FormFactor](https://github.com/PaulKinlan/formfactor)\r\n    FormFactor helps you customize your web app for different form factors, e.g. when you make\r\n    \"the mobile version\", \"the TV version\", etc.\r\n  * [UAParser.js](http://faisalman.github.com/ua-parser-js/)\r\n    Lightweight JavaScript-based User-Agent String Parser\r\n\r\n\r\n# License\r\n\r\nMIT-License (see LICENSE file).\r\n\r\n\r\n# Contributing\r\n\r\nYour contribution is welcome.\r\nIf you want new devices to be supported, please contribute to\r\n[Mobile-Detect](https://github.com/serbanghita/Mobile-Detect) instead.\r\n\r\nTo run generate-script it is necessary to have [Mobile-Detect](https://github.com/serbanghita/Mobile-Detect)\r\nas a sibling directory to mobile-detect.js/.\r\n(I tried to use `git subtree` but had some problems on Mac OS X - probably my fault...)\r\n\r\n  * fork or clone serbanghita/Mobile-Detect\r\n  * fork hgoebl/mobile-detect.js\r\n  * run `npm install`\r\n  * create branch\r\n  * make changes and run `grunt` (needs PHP >= 5.4 in your path)\r\n  * run browser test (tests/SpecRunner.html)\r\n  * commit, push to your branch\r\n  * create pull request\r\n\r\n## Testing\r\n\r\n### Browser\r\n\r\nOpen `tests/SpecRunner.html` in different browsers.\r\n\r\n### Node.js\r\n\r\n    $ npm test\r\n    $ # or\r\n    $ grunt jasmine_node\r\n\r\n\r\n# Donations\r\n\r\nIf you want, you can donate to [Mobile-Detect](https://github.com/serbanghita/Mobile-Detect).\r\n\r\n\r\n# TODO\r\n\r\n  * Extend RegEx patterns so that test passes\r\n  * update mobilegrade() function to PHP-version\r\n  * Provide gh_pages w/ JSDoc and a live example\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}